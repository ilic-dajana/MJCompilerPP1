package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.io.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
		boolean errorDetected;
		Logger log = Logger.getLogger(getClass());
		
		 public void report_fatal_error(String message, Object info) throws java.lang.Exception {
    		  	done_parsing();
      			report_error(message, info);
    	}
  
 	   public void syntax_error(Symbol cur_token) {
    		    report_error("\nSintaksna greska", cur_token);
    	}
  
    	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        		report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    	}
    
     	public void report_error(String message, Object info) {
    			errorDetected = true;
		    	StringBuilder msg = new StringBuilder(message); 
		    	
		    	if (info instanceof Symbol)
		            msg.append (" na liniji ").append(((Symbol)info).left);
		        log.error(msg.toString());
	   }
	   
	   public void report_info(String message, Object info){
	   		StringBuilder msg = new StringBuilder(message); 
	    	if (info instanceof Symbol)
	            msg.append (" na liniji ").append(((Symbol)info).left).append (" i koloni ").append(((Symbol)info).right);
	        log.info(msg.toString());
	   }


:}

init with {:
	errorDetected = false;
:}
    
scan with {:
		Symbol s = this.getScanner().next_token();
		
		if (s != null && s.value != null) 
			log.info(s.toString() + " " + s.value.toString());
		return s;
:}

terminal    PROG, LBRACE, RBRACE, SEMICOLON, BREAK,  CONST, NEW, READ, FOR, CONTINUE;
terminal    MINUS, DIV, MUL, MOD, NOTEQ, LPAREN, RPAREN, EQ. RETURN, PLUS, COMMA, PRINT, VOID;
terminal    IF, ELSE, GRT, GRTEQ, LESS, LESSEQ, AND, OR, INC, DEC, ASSIGN, DOT, LBRACK, RBRACK; 
terminal Integer NUMBER;
terminal String IDENT;
terminal Character CHARCONST;
terminal Boolean BOOLCONST;

nonterminal Program;
nonterminal ProgIdent;
nonterminal DeclList;
nonterminal Declaration;
nonterminal ConstDecl;
nonterminal Type;
nonterminal ConstList;
nonterminal Constant ;
nonterminal VarDecl;
nonterminal VarDeclList;
nonterminal VarNames;
nonterminal VarIdent;
nonterminal MethodDecl;
nonterminal MethodDeclList;
nonterminal ReturnType;
nonterminal MethodIdent;
nonterminal FormParams;
nonterminal FormalParameter;
nonterminal OneFormParam;
nonterminal Statements;
nonterminal Statement;
nonterminal DesignatorStatement;
nonterminal Designator;
nonterminal DesignatorIdent;
nonterminal Designators;
nonterminal DesignatorPart;
nonterminal AssignStatement;
nonterminal FunctionCall;
nonterminal FunctionCallParameter;
nonterminal ActualParams;
nonterminal IfCondition;
nonterminal Else;
nonterminal ForIdent;
nonterminal ForInit;
nonterminal ForCondition;
nonterminal ForEnd;
nonterminal Condition;
nonterminal CondTerm;
nonterminal CondFact;
nonterminal Expr;
nonterminal AddopExpr;
nonterminal Term;
nonterminal Factor;
nonterminal ArrayInitList;
nonterminal Dummy;
nonterminal Addop;
nonterminal Mulop;
nonterminal Relop;


precedence left ELSE;

Program ::= (Program) PROG ProgIdent DeclList LBRACE MethodDeclList RBRACE;

ProgIdent ::= (ProgramIdent) IDENT:progname;

DeclList ::= (DeclarationList) DeclList Declaration
						  |
						  (EmptyDeclarationList)    /*   epsilon    */  ;	
						  
Declaration ::= (ConstDeclaration) ConstDecl
								  |
								 (VarDeclaration) VarDecl;
								 
ConstDecl ::= (ConstDecl) CONST Type ConstList SEMICOLON;

Type ::= (Type) IDENT:type;

ConstList ::= (MultipleConstList) ConstList COMMA Constant
							 |
							 ( OneConstList) Constant ;
							 
							 
Constant ::= (ConstNumber) IDENT:numIdent ASSIGN NUMBER:num
							|
							(ConstBool) IDENT:boolIdent ASSIGN BOOLCONST:val
							|
							(ConstChar) IDENT:charIdent ASSIGN CHARCONST:c ;

VarDecl ::= (VariableDeclaration) Type VarNames SEMICOLON;

VarDeclList ::=  (MultipleVariableDeclarations) VarDeclList VarDecl
								   |
								   (EmptyVariableDeclarations)  /*  epsilon  */ ;
								   
VarNames ::= (MultipleVariableNames) VarNames COMMA VarIdent
							    |
							    (OneVariableName) VarIdent;

VarIdent ::= (VariableIdent) IDENT:var
							|
							(ArrayVariableIdent) IDENT:var LBRACK RBRACK;
							

MethodDecl ::= (MethodDeclaration) ReturnType MethodIdent FromParams VarDeclList LBRACE Statements RBRACE;

MethodDeclList ::= (MultipleMethodDeclarations) MethodDeclList MethodDecl
											|
											(EmptyMethodDeclaration) /* epsilon */ ;
											
ReturnType ::= (NonVoidType) Type
								 |
								(VoidType) VOID;
								
MethodIdent ::= (MethodIdent) IDENT:method;

FormParams ::= (FormalParameters) LPAREN FormalParameter RPAREN;

FormalParameter ::= (MultipleFormalParameters) FormalParameter COMMA OneFormParam
												|
												(OneFormalParameter) OneFormParam;

OneFormParam ::= (UsualParameter) Type IDENT:param
											|
											(ArrayParameter) Type IDENT:param LBRACK RBRACK
											|
											(NumberParameter) Type IDENT:param ASSIGN NUMBER:n
											|
											(CharParameter)  Type IDENT:param ASSIGN CHARCONST:c
											|
											(BoolParameter) Type IDENT:param ASSIGN BOOLCONST:b;
											
Statements ::= (MultipleStatements) Statements  Statement
								  |
								  (EmptyStatements) /* epsilon */ ;
								  											
Statement  ::=  (DesignatorStatement) DesignatorStatement SEMICOLON
								  |
								 (BreakStatement) BREAK SEMICOLON
								 |
								 (ContinueStatement) CONTINUE SEMICOLON
								 |
								 (ExpressionReturnStatement) RETURN Expr SEMICOLON
								 |
								 (EmptyReturnStatement) RETURN SEMICOLON	
								 |
								 (StatementBlock) LBRACE Statement RBRACE
								 |
								 (ReadStatement) READ LPAREN Designator RPAREN SEMICOLON
								 |
								 (PrintOneStatement) PRINT LPAREN Expr RPAREN SEMICOLON
								 |
								 (PrintMultipleStatement) PRINT LPAREN Expr COMMA NUMBER:num RPAREN SEMICOLON;
								 |
								 (IFStatement) IF LPAREN IfCondition RPAREN Statement
								 |
								 (IFELSEStatement) IF LPAREN IfCondition RPAREN Statement Else Statement
								 |
								 (FORStatement) ForIdent LPAREN ForInit SEMICOLON ForCondition SEMICOLON ForEnd RPAREN Statement;
								 
DesignatorStatement ::= (AssignDesignator) AssignStatement
														|
														(IncrementDesignator) Designator INC
														|
														(DecrementDesignator) Designator DEC
														|
														(FunctionCallDesignator) FunctionCall;

Designator ::= (Designator) DesignatorIdent Designators;

DesignatorIdent ::= (DesignatorIdent) IDENT:des;

Designators ::= (MultipleDesignators) Designators DesignatorPart
								   |
								   (EmptyDesignator)  /* epsilon */ ;

DesignatorPart ::=  (DesignatorArray) LBRACK Expr RBRACK;								

AssignStatement ::= (AssignStatement) Designator ASSIGN Expr;

FunctionCall ::= (FunctionCall) Designator LPAREN FunctionCallParameters RPAREN;

FunctionCallParameter ::= (ActualParameters) ActualParams
															|
															(EmptyParameters) /* epsilon */ ;
															
ActualParams ::=(MultipleActualParameters) ActualParams COMMA Expr
									  |
									  (OneActualParameter) Expr ;
															
								
IfCondition ::= (IFCondition) Condition ;

Else ::= (Else) ELSE ;

ForIdent ::= (ForIdent) FOR ;

ForInit ::= (NonEmptyForInit) DesignatorStatement
						|
					   (EmptyForInit) /* epsilon */ ;
						
ForCondition ::= (NonEmptyForCondition) Condition
									 |
									 (EmptyForCondition) /* epsilon */ ;

ForEnd ::= (NonEmptyForEnd) DesignatorStatement
						|
						(EmptyForEnd) /* epsilon */ ;

Condition ::= (MultipleCondition) Condition OR CondTerm
							  |
							  (OneCondition) CondTerm;
							  
CondTerm ::= (MultipleConditionTerms) CondTerm AND CondFact
							   |
							   (OneConditionTerm) CondFact;

CondFact ::= (ExpressionConditionFact) Expr
							|
							(RelOpConditionFact) Expr Relop Expr;

Expr ::= (Expression) AddopExpr
				  |
				  (NegativeExpression) MINUS AddopExpr ;

AddopExpr ::= (AddExpression) AddopExpr Addop Term
								 |
								 (OneAddExpression) Term ;
								 
Term ::= (AddTerm) Term Mulop Factor
				   |
				   (OneMulFactor) Factor ;
				   
				   
Factor ::= (DesignatorF) Designator
					  |
					  (NumConstF) NUMBER:num
					  |
					  (CharConstF) CHARCONST:c
					  |
					  (BoolConstF) BOOLCONST:b
					  |
					  (NewF) NEW Type
					  |
					  (NewArrayF) NEW Type LBRACK Expr RBRACK
					  |
					  (	NewArrayWithInitListF) NEW Type LBRACK Expr RBRACK LBRACE ArrayInitList RBRACE
					  |
					  (FunctionCallF) FunctionCall
					  |
					  (ComplexExpressionF) LPAREN Expr RPAREN ;

ArrayInitList ::= (MultipleArrayInit) ArrayInitList COMMA Dummy Expr
									|
									(OneArrayInit) Dummy Expr ;
					  			   
Dummy ::= (Dummy)  ;

Addop ::= (Plus) PLUS
					   |					 
					   (Minus) MINUS ;

Mulop ::= (Mul) MUL
					  |
					  (Div) DIV
					  |
					  (Mod) MOD ;
					  	
Relop ::= (RelopEQ) EQ
					|
					(RelopNEQ) NOTEQ
					|
					(RelopGRT) GRT
					|
					(RelopGRTEQ) GRTEQ
					|
					(RelopLESSEQ) LESSEQ
					|
					(RelopLESS) LESSS ;


